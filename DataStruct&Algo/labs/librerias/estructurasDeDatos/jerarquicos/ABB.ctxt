#BlueJ class context
comment0.target=ABB
comment0.text=\ Clase\ ABB<E>\ que\ representa\ un\ Arbol\ Binario\ mediante\ un\ enlace\ \n\ \ a\ su\ actual\ raiz.\ Sus\ caracteristicas\ son\ las\ siguientes\:\ \n\ \ 1.-\ El\ tipo\ de\ sus\ elementos\ es\ E\ extends\ Comparable<E>\n\ \ 2.-\ ATRIBUTOS\ (protected\ para\ la\ herencia)\:\ \n\ \ \ \ \ \ TIENE\ UN\ NodoABB<E>\ raiz\n\n\ @version\ Noviembre\ 2021\n
comment1.params=
comment1.target=ABB()
comment1.text=\ \n\ Constructor\ de\ un\ ABB\ vacio\ \n
comment10.params=e\ actual
comment10.target=NodoABB\ insertar(java.lang.Comparable,\ NodoABB)
comment10.text=\ Actualiza\ el\ dato\ e\ a\ partir\ del\ nodo\ actual.\ Si\ no\ esta\ lo\ inserta\ \n\ @param\ \ \ \ e\ \ \ \ \ \ \ Elemento\ a\ insertar/actualizar\n\ @param\ \ \ \ actual\ \ Nodo\ actual\ en\ la\ busqueda\n\ @return\ \ \ Nodo\ raiz\ del\ subarbol\ cuya\ raiz\ actual\ es\ el\ nodo\ actual\ \n
comment11.params=
comment11.target=int\ talla()
comment11.text=\n\ Devuelve\ el\ numero\ de\ elementos\ del\ ABB\n\ @return\ Talla\ del\ ABB\n
comment12.params=actual
comment12.target=int\ talla(NodoABB)
comment12.text=\n\ Devuelve\ el\ tamanyo\ del\ nodo\ actual\n\ @param\ actual\ \ \ Nodo\ actual\n\ @return\ Tamanyo\ del\ nodo\ actual\n
comment13.params=
comment13.target=java.lang.Comparable\ recuperarMin()
comment13.text=\ \ SII\ \!esVacio()\:\ devuelve\ el\ elemento\ minimo\ del\ ABB\n\ @return\ Elemento\ minimo\ \ \n
comment14.params=actual
comment14.target=NodoABB\ recuperarMin(NodoABB)
comment14.text=\ Devuelve\ el\ elemento\ minimo\ a\ partir\ del\ nodo\ actual\ \n\ @param\ \ \ \ actual\ \ Nodo\ actual\ en\ la\ busqueda\n\ @return\ \ \ Nodo\ que\ contiene\ el\ elemento\ m\u00EDnimo\ \n
comment15.params=
comment15.target=java.lang.Comparable\ eliminarMin()
comment15.text=\ SII\ \!esVacio()\:\ elimina\ el\ minimo\ del\ ABB\n\ @return\ Elemento\ minimo\ del\ ABB\ (null\ si\ esta\ vacio)\n
comment16.params=actual
comment16.target=NodoABB\ eliminarMin(NodoABB)
comment16.text=\ Elimina\ el\ minimo\ a\ partir\ del\ nodo\ actual\n\ @param\ \ \ \ actual\ \ Nodo\ actual\ en\ la\ busqueda\n\ @return\ Nodo\ raiz\ del\ subarbol\ cuya\ raiz\ actual\ es\ el\ nodo\ actual\n
comment17.params=e
comment17.target=void\ eliminar(java.lang.Comparable)
comment17.text=\ Elimina\ el\ nodo\ que\ contiene\ el\ dato\ e\ \n\ @param\ \ e\ \ \ Dato\ a\ eliminar\n
comment18.params=e\ actual
comment18.target=NodoABB\ eliminar(java.lang.Comparable,\ NodoABB)
comment18.text=\ Elimina\ el\ nodo\ que\ contiene\ el\ dato\ e\ a\ partir\ del\ nodo\ actual\ \n\ @param\ \ e\ \ \ \ \ \ \ Dato\ a\ eliminar\n\ @param\ \ actual\ \ Nodo\ actual\ en\ la\ busqueda\n\ @return\ Nodo\ raiz\ del\ subarbol\ cuya\ raiz\ actual\ es\ el\ nodo\ actual\n
comment19.params=
comment19.target=boolean\ esVacio()
comment19.text=\n\ Devuelve\ true\ si\ el\ ABB\ esta\ vacio\n\ @return\ true\ si\ esta\ vacio,\ false\ en\ caso\ contrario\n
comment2.params=v
comment2.target=ABB(java.lang.Comparable[])
comment2.text=\n\ Constructor\ de\ un\ ABB\ con\ los\ elementos\ del\ vector\ dado.\n\ El\ ABB\ resultante\ debe\ estar\ equilibrado.\n\ @param\ v\ Array\ con\ los\ elementos\ a\ insertar\ en\ el\ ABB\n
comment20.params=
comment20.target=java.lang.String\ toStringInOrden()
comment20.text=\n\ Recorrido\ inOrden\ del\ ABB\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ inOrden\n
comment21.params=sb\ actual
comment21.target=void\ toStringInOrden(java.lang.StringBuilder,\ NodoABB)
comment21.text=\n\ Recorrido\ inOrden\ a\ partir\ del\ nodo\ actual\n\ @param\ sb\ \ \ \ \ \ StringBuilder\ para\ ir\ construyendo\ la\ cadena\ de\ texto\ \n\ @param\ actual\ \ Nodo\ actual\ en\ la\ busqueda\n
comment22.params=
comment22.target=java.lang.String\ toStringPreOrden()
comment22.text=\n\ Recorrido\ en\ preOrden\ del\ ABB\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ preOrden\n
comment23.params=sb\ actual
comment23.target=void\ toStringPreOrden(java.lang.StringBuilder,\ NodoABB)
comment23.text=\n\ Recorrido\ preOrden\ a\ partir\ del\ nodo\ actual\n\ @param\ sb\ \ \ \ \ \ StringBuilder\ para\ ir\ construyendo\ la\ cadena\ de\ texto\ \n\ @param\ actual\ \ Nodo\ actual\ en\ la\ busqueda\n
comment24.params=
comment24.target=java.lang.String\ toStringPostOrden()
comment24.text=\n\ Recorrido\ en\ postOrden\ del\ ABB\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ postOrden\n
comment25.params=sb\ actual
comment25.target=void\ toStringPostOrden(java.lang.StringBuilder,\ NodoABB)
comment25.text=\n\ Recorrido\ postOrden\ a\ partir\ del\ nodo\ actual\n\ @param\ sb\ \ \ \ \ \ StringBuilder\ para\ ir\ construyendo\ la\ cadena\ de\ texto\ \n\ @param\ actual\ \ Nodo\ actual\ en\ la\ busqueda\n
comment26.params=
comment26.target=java.lang.String\ toStringPorNiveles()
comment26.text=\n\ Recorrido\ por\ niveles\ del\ ABB\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ por\ niveles\n
comment27.params=
comment27.target=java.lang.Comparable[]\ toArrayInOrden()
comment27.text=\n\ Construye\ un\ array\ ordenado\ de\ forma\ creciente\ con\ todos\ los\n\ elementos\ del\ ABB,\ resultado\ del\ recorrido\ en\ InOrden\ del\ mismo\n\ @return\ Array\ con\ los\ valores\ del\ ABB\ segun\ el\ recorrido\ en\ InOrden\n
comment28.params=v\ actual\ pos
comment28.target=void\ toArrayInOrden(java.lang.Comparable[],\ NodoABB,\ int)
comment28.text=\n\ Construye\ un\ array\ ordenado\ de\ forma\ creciente\ con\ todos\ los\n\ elementos\ a\ partir\ del\ nodo\ actual,\ siguiendo\ el\ recorrido\ en\ InOrden\n\ @param\ v\ \ \ \ \ \ \ \ \ Array\ con\ los\ elementos\ segun\ el\ recorrido\ en\ InOrden\n\ @param\ actual\ \ \ \ Nodo\ actual\ en\ el\ recorrido\n\ @param\ pos\ \ \ \ \ \ \ Posici\u00F3n\ en\ el\ array\ v\n
comment3.params=v\ ini\ fin
comment3.target=NodoABB\ construirEquilibrado(java.lang.Comparable[],\ int,\ int)
comment3.text=\n\ Construye\ un\ ABB\ equilibrado\ con\ los\ elementos\ del\ vector\ dado.\n\ @param\ v\ \ \ \ \ Array\ con\ los\ elementos\ a\ insertar\ en\ el\ ABB\n\ @param\ ini\ \ \ Inicio\ del\ intervalo\ a\ considerar\ en\ el\ vector\n\ @param\ fin\ \ \ Fin\ del\ intervalo\ a\ considerar\ en\ el\ vector\n\ @return\ Raiz\ del\ sub\u00E1rbol\n
comment4.params=
comment4.target=void\ reconstruirEquilibrado()
comment4.text=\ \n\ Reconstruye\ el\ ABB,\ con\ los\ mismos\ datos,\ de\ forma\ que\ quede\ \n\ equilibrado\ \ \ \ \ \ \ \ \n
comment5.params=e
comment5.target=java.lang.Comparable\ sucesor(java.lang.Comparable)
comment5.text=\n\ Devuelve\ el\ sucesor\ de\ un\ elemento\ en\ el\ ABB\n\ @param\ e\ Elemento\ cuyo\ sucesor\ se\ va\ a\ buscar\n\ @return\ \ Sucesor\ de\ "e",\ o\ null\ si\ no\ hay\ sucesor\n
comment6.params=e\ actual
comment6.target=NodoABB\ sucesor(java.lang.Comparable,\ NodoABB)
comment6.text=\ \n\ SII\ actual\ \!\=\ null\:\ devuelve\ el\ nodo\ de\ actual\ que\ contiene\ \n\ al\ sucesor\ de\ "e",\ o\ null\ si\ no\ existe\n\ @param\ e\ \ \ \ \ \ \ \ \ Elemento\ cuyo\ sucesor\ se\ va\ a\ buscar\n\ @param\ actual\ \ \ \ Nodo\ actual\ en\ la\ busqueda\n\ @return\ \ Sucesor\ de\ "e"\ en\ el\ nodo\ actual,\ o\ null\ si\ no\ existe\n
comment7.params=e
comment7.target=java.lang.Comparable\ recuperar(java.lang.Comparable)
comment7.text=\ Busca\ el\ valor\ dado\ en\ el\ ABB\n\ @param\ \ \ \ e\ \ \ \ \ \ \ Elemento\ a\ buscar\n\ @return\ \ \ Dato\ en\ el\ ABB\ que\ coincide\ con\ e,\ null\ si\ no\ hay\ \ \ \ \ \ \ \ \ \ \n
comment8.params=e\ actual
comment8.target=NodoABB\ recuperar(java.lang.Comparable,\ NodoABB)
comment8.text=\ Busca\ el\ valor\ dado\ a\ partir\ del\ nodo\ actual\n\ @param\ \ \ \ e\ \ \ \ \ \ \ Elemento\ a\ buscar\n\ @param\ \ \ \ actual\ \ Nodo\ actual\ en\ la\ busqueda\n\ @return\ \ \ Dato\ en\ el\ ABB\ que\ coincide\ con\ e,\ null\ si\ no\ hay\ \ \ \ \ \ \ \ \ \ \n
comment9.params=e
comment9.target=void\ insertar(java.lang.Comparable)
comment9.text=\ Actualiza\ el\ dato\ e\ en\ el\ ABB,\ si\ no\ esta\ lo\ inserta\ \n\ @param\ \ \ \ e\ \ \ \ \ \ \ Elemento\ a\ insertar/actualizar\n
numComments=29
