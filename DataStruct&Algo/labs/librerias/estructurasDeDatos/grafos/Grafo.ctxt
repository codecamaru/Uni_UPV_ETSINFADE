#BlueJ class context
comment0.target=Grafo
comment0.text=\ Clase\ abstracta\ Grafo\:\ Base\ de\ la\ jerarquia\ Grafo,\ que\ define\ el\ \n\ \ comportamiento\ de\ un\ grafo.<br>\ \n\ \ No\ es\ una\ interfaz\ porque\ incluye\ el\ codigo\ de\ las\ operaciones\ de\ un\ \n\ \ grafo\ que\ son\ independientes\ tanto\ de\ su\ tipo\ como\ de\ su\ implementacion.<br>\n\ \ \n\ \ @version\ Diciembre\ 2018\n
comment1.params=dirigido
comment1.target=Grafo(boolean)
comment1.text=\ Crea\ un\ grafo\ vacio,\ Dirigido\ si\ dirigido\ es\ true\n\ o\ No\ Dirigido\ en\ caso\ contrario.\n\ \n\ @param\ dirigido\ Indica\ el\ tipo\ del\ grafo,\ Dirigido\ o\ No\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\ Devuelve\ un\ String\ con\ cada\ uno\ de\ los\ vertices\ de\ un\ grafo\ y\ sus\ \n\ adyacentes,\ en\ orden\ de\ insercion.\n\ \n\ @return\ \ String\ que\ representa\ a\ un\ grafo\n
comment11.params=
comment11.target=int[]\ toArrayBFS()
comment11.text=\ Devuelve\ un\ array\ con\ cada\ uno\ de\ los\ vertices\ de\ un\ grafo\ y\ sus\ \n\ adyacentes,\ en\ orden\ BFS.\n\ \n\ @return\ \ Array\ de\ vertices\ visitados\ en\ el\ recorrido\ BFS\n
comment12.params=origen\ res
comment12.target=void\ toArrayBFS(int,\ int[])
comment13.params=
comment13.target=Arista[]\ arbolRecubrimientoBFS()
comment13.text=\ PRECONDICION\:\ \!this.esDirigido()\n\ Devuelve\ un\ subconjunto\ de\ aristas\ que\ conectan\ todos\ los\ vertices\n\ de\ un\ grafo\ No\ Diridigo\ y\ Conexo,\ o\ null\ si\ el\ grafo\ no\ es\ Conexo.\n\ \ \n\ @return\ Arista[],\ array\ con\ las\ numV\ -\ 1\ aristas\ que\ conectan\ \ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ los\ numV\ vertices\ del\ grafo,\ o\ null\ si\ el\ grafo\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ no\ es\ Conexo\n
comment14.params=origen\ res
comment14.target=void\ arbolRecubrimientoBFS(int,\ Arista[])
comment15.params=
comment15.target=Arista[]\ kruskal()
comment15.text=\ PRECONDICION\:\ \!this.esDirigido()\n\ Devuelve\ un\ subconjunto\ de\ aristas\ que,\ con\ coste\ minimo,\ \ \n\ conectan\ todos\ los\ vertices\ de\ un\ grafo\ No\ Dirigido\ y\ Conexo,\ \n\ o\ null\ si\ el\ grafo\ no\ es\ Conexo.\n\ \n\ @return\ Arista[],\ array\ con\ las\ numV\ -\ 1\ aristas\ que\ conectan\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ los\ numV\ vertices\ con\ coste\ minimo,\ o\ null\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ si\ el\ grafo\ no\ es\ Conexo\n
comment16.params=v
comment16.target=int\ esHojaEnMST(int)
comment2.params=
comment2.target=boolean\ esDirigido()
comment2.text=\ Comprueba\ si\ un\ grafo\ es\ o\ no\ Dirigido.\n\n\ @return\ boolean\ true\ si\ el\ grafo\ es\ Dirgido\ y\ false\ si\ es\ No\ Dirigido\n
comment3.params=
comment3.target=int\ numVertices()
comment3.text=\ Devuelve\ el\ numero\ de\ vertices\ de\ un\ grafo.\n\ \n\ @return\ int\ numero\ de\ vertices\n
comment4.params=
comment4.target=int\ numAristas()
comment4.text=\ Devuelve\ el\ numero\ de\ aristas\ de\ un\ grafo.\n\ \n\ @return\ int\ numero\ de\ aristas\n
comment5.params=i\ j
comment5.target=boolean\ existeArista(int,\ int)
comment5.text=\ Comprueba\ si\ la\ arista\ (i,j)\ esta\ en\ un\ grafo.\n\ \n\ @param\ i\ \ \ \ Vertice\ origen\n\ @param\ j\ \ \ \ Vertice\ destino\n\ @return\ boolean\ true\ si\ (i,j)\ esta\ en\ el\ grafo\ y\ false\ en\ caso\ contrario\n
comment6.params=i\ j
comment6.target=double\ pesoArista(int,\ int)
comment6.text=\ Devuelve\ el\ peso\ de\ la\ arista\ (i,j)\ de\ un\ grafo,\ 0\ si\ dicha\ arista\ \n\ no\ esta\ en\ el\ grafo.\n\ \n\ @param\ i\ \ \ \ Vertice\ origen\n\ @param\ j\ \ \ \ Vertice\ destino\n\ @return\ double\ Peso\ de\ la\ arista\ (i,j),\ 0\ si\ no\ existe.\n
comment7.params=i\ j
comment7.target=void\ insertarArista(int,\ int)
comment7.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,j)\ en\ un\ grafo\ No\ Ponderado.\n\ \n\ @param\ i\ \ \ \ Vertice\ origen\n\ @param\ j\ \ \ \ Vertice\ destino\n
comment8.params=i\ j\ p
comment8.target=void\ insertarArista(int,\ int,\ double)
comment8.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ de\ peso\ p\ en\ un\ grafo\ Ponderado.\n\ \n\ @param\ i\ \ \ \ Vertice\ origen\n\ @param\ j\ \ \ \ Vertice\ destino\n\ @param\ p\ \ \ \ Peso\ de\ la\ arista\ (i,\ j)\n
comment9.params=i
comment9.target=librerias.estructurasDeDatos.modelos.ListaConPI\ adyacentesDe(int)
comment9.text=\ Devuelve\ una\ ListaConPI\ que\ contiene\ los\ adyacentes\ al\ vertice\ i.\n\ \n\ @param\ i\ Vertice\ del\ que\ se\ obtienen\ los\ adyacentes\n\ @return\ ListaConPI\ con\ los\ vertices\ adyacentes\ a\ i\n
numComments=17
